{
  "contract_name": "neutron_interchain_queries",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "connection_id",
      "contract_addr"
    ],
    "properties": {
      "connection_id": {
        "type": "string"
      },
      "contract_addr": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "mint_nft"
        ],
        "properties": {
          "mint_nft": {
            "type": "object",
            "required": [
              "token_id"
            ],
            "properties": {
              "token_id": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register_transfer_nft_query"
        ],
        "properties": {
          "register_transfer_nft_query": {
            "type": "object",
            "required": [
              "connection_id",
              "contract_address",
              "min_height",
              "recipient",
              "sender",
              "token_id",
              "update_period"
            ],
            "properties": {
              "connection_id": {
                "type": "string"
              },
              "contract_address": {
                "type": "string"
              },
              "min_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "recipient": {
                "type": "string"
              },
              "sender": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              },
              "update_period": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_interchain_query"
        ],
        "properties": {
          "remove_interchain_query": {
            "type": "object",
            "required": [
              "query_id"
            ],
            "properties": {
              "query_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unlock_nft"
        ],
        "properties": {
          "unlock_nft": {
            "type": "object",
            "required": [
              "destination",
              "token_id"
            ],
            "properties": {
              "destination": {
                "type": "string"
              },
              "token_id": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "transfer_nft"
        ],
        "properties": {
          "transfer_nft": {
            "type": "object",
            "required": [
              "query_id"
            ],
            "properties": {
              "query_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_registered_query"
        ],
        "properties": {
          "get_registered_query": {
            "type": "object",
            "required": [
              "query_id"
            ],
            "properties": {
              "query_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_registered_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryRegisteredQueryResponse",
      "type": "object",
      "required": [
        "registered_query"
      ],
      "properties": {
        "registered_query": {
          "description": "*registered_query** is a registered query",
          "allOf": [
            {
              "$ref": "#/definitions/RegisteredQuery"
            }
          ]
        }
      },
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Height": {
          "type": "object",
          "properties": {
            "revision_height": {
              "description": "*height** is a height of remote chain",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "revision_number": {
              "description": "the revision that the client is currently on",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "KVKey": {
          "description": "Describes a KV key for which you want to get value from the storage on remote chain",
          "type": "object",
          "required": [
            "key",
            "path"
          ],
          "properties": {
            "key": {
              "description": "*key** is a key you want to read from the storage",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "path": {
              "description": "*path** is a path to the storage (storage prefix) where you want to read value by key (usually name of cosmos-packages module: 'staking', 'bank', etc.)",
              "type": "string"
            }
          }
        },
        "QueryType": {
          "description": "Describes possible interchain query types",
          "oneOf": [
            {
              "description": "*kv** is an interchain query type to query KV values from remote chain",
              "type": "string",
              "enum": [
                "kv"
              ]
            },
            {
              "description": "*tx** is an interchain query type to query transactions from remote chain",
              "type": "string",
              "enum": [
                "tx"
              ]
            }
          ]
        },
        "RegisteredQuery": {
          "type": "object",
          "required": [
            "connection_id",
            "id",
            "keys",
            "owner",
            "query_type",
            "transactions_filter",
            "update_period"
          ],
          "properties": {
            "connection_id": {
              "description": "The IBC connection ID for getting ConsensusState to verify proofs.",
              "type": "string"
            },
            "deposit": {
              "description": "Amount of coins deposited for the query.",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "id": {
              "description": "The unique id of the registered query.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "keys": {
              "description": "The KV-storage keys for which we want to get values from remote chain",
              "type": "array",
              "items": {
                "$ref": "#/definitions/KVKey"
              }
            },
            "last_submitted_result_local_height": {
              "description": "The local chain last block height when the query result was updated.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "last_submitted_result_remote_height": {
              "description": "The remote chain last block height when the query result was updated.",
              "default": {
                "revision_height": 0,
                "revision_number": 0
              },
              "allOf": [
                {
                  "$ref": "#/definitions/Height"
                }
              ]
            },
            "owner": {
              "description": "The address that registered the query.",
              "type": "string"
            },
            "query_type": {
              "description": "The query type identifier (i.e. 'kv' or 'tx' for now)",
              "allOf": [
                {
                  "$ref": "#/definitions/QueryType"
                }
              ]
            },
            "registered_at_height": {
              "description": "The local chain height when the query was registered.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "submit_timeout": {
              "description": "The remote chain last block height when the query result was updated.",
              "default": 0,
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "transactions_filter": {
              "description": "The filter for transaction search ICQ",
              "type": "string"
            },
            "update_period": {
              "description": "Parameter that defines how often the query must be updated.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "transfer_nft": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TransferNftResponse",
      "type": "object",
      "required": [
        "contract_address",
        "sender",
        "token_id"
      ],
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    }
  }
}